from sqlalchemy.orm import Session
from fastapi import HTTPException, status, Depends
from fastapi.security import OAuth2PasswordBearer
from models.user import User
from schemas.user import UserCreate
from passlib.context import CryptContext
from uuid import UUID
from core.security import create_access_token, verify_access_token
from core.database import get_db

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)


oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# 游댳 Criar novo usu치rio (apenas admin usa esse service)
def create_user(db: Session, user_data: UserCreate) -> User:
    existing_user = db.query(User).filter(User.username == user_data.username).first()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username j치 est치 em uso."
        )
    
    hashed_password = get_password_hash(user_data.password)

    new_user = User(
        full_name=user_data.full_name,
        username=user_data.username,
        password_hash=hashed_password,
        role=user_data.role
    )

    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user

# 游댳 Atualizar senha
def update_user_password(db: Session, user_id: str, new_password: str) -> None:
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="Usu치rio n칚o encontrado")

    user.password_hash = get_password_hash(new_password)
    db.commit()

# 游댳 Listar usu치rios (exibi칞칚o p칰blica)
def get_all_users(db: Session):
    return db.query(User).all()

# 游댳 Login do usu치rio
def authenticate_user(db: Session, username: str, password: str) -> str:
    user = db.query(User).filter(User.username == username).first()
    
    if not user or not verify_password(password, user.password_hash):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Usu치rio ou senha incorretos",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # Retorna token JWT com id no sub
    token = create_access_token(data={"sub": str(user.id)})
    return token

# 游댳 Recupera o usu치rio autenticado a partir do token JWT
def get_current_user(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db)
) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="N칚o autenticado",
        headers={"WWW-Authenticate": "Bearer"},
    )

    payload = verify_access_token(token)
    user_id = payload.get("sub")

    if user_id is None:
        raise credentials_exception

    try:
        user_uuid = UUID(user_id)
    except ValueError:
        raise credentials_exception

    user = db.query(User).filter(User.id == user_uuid).first()

    if not user:
        raise credentials_exception

    return user